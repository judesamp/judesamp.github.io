<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-05-26T17:42:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>A Brief Introduction to RSpec</title>
    <link rel="alternate" href="/blog/2014/05/26/rspec-overview.html"/>
    <id>/blog/2014/05/26/rspec-overview.html</id>
    <published>2014-05-26T17:42:00Z</published>
    <updated>2014-05-26T17:42:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I was tasked with putting together an introductory piece on RSpec for The Ironyard’s &lt;a href="https://github.com/theironyard/Ruby-Enchiridion"&gt;Ruby-Enchiridion&lt;/a&gt; this weekend. This is what I came up with. Enjoy!&lt;/p&gt;

&lt;h4&gt;Rspec&lt;/h4&gt;

&lt;p&gt;RSpec is a testing tool for the Ruby programming language. RSpec is designed to help programmers...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I was tasked with putting together an introductory piece on RSpec for The Ironyard&amp;rsquo;s &lt;a href="https://github.com/theironyard/Ruby-Enchiridion"&gt;Ruby-Enchiridion&lt;/a&gt; this weekend. This is what I came up with. Enjoy!&lt;/p&gt;

&lt;h4&gt;Rspec&lt;/h4&gt;

&lt;p&gt;RSpec is a testing tool for the Ruby programming language. RSpec is designed to help programmers do Test-Driven Development (TDD). RSpec is a commonly used testing tool in the Rails community.&lt;/p&gt;

&lt;h4&gt;Basic RSpec Setup Instructions for Rails&lt;/h4&gt;

&lt;ol class="markdown_ordered_list"&gt;
  &lt;li&gt;Add Gem to gemfile (in both developement and test groups)
    &amp;ldquo;`
    group :development, :test do
      gem &amp;lsquo;rspec-rails&amp;rsquo;, &amp;lsquo;~&gt; 3.0.0.beta&amp;rsquo;
    end
    &amp;rdquo;`
  &lt;/li&gt;
  &lt;li&gt;Run &amp;lsquo;bundle install&amp;rsquo;&lt;/li&gt;
  &lt;li&gt;Initialize spec directory by running &amp;lsquo;rails generate rspec:install&amp;rsquo; &amp;mdash; this will create a spec directory and put a spec_helper.rb file inside of it. This spec helper file contains setup and configuration for rspec.&lt;/li&gt;
  &lt;li&gt;In the file where you&amp;rsquo;ll be writing tests (users_controller_spec.rb, for instance), type &amp;ldquo;require &amp;lsquo;spec_helper&amp;rsquo;&amp;rdquo; at the top of the file.&lt;/li&gt;
  &lt;li&gt;Now you&amp;rsquo;re ready to start writing tests. (See tips or resources for more detailed setup info.)&lt;/li&gt;
  &lt;li&gt;Runs the tests with &amp;lsquo;rake spec.&amp;rsquo; This will run all the tests in the spec directory. To run more specific tests, drill down with something like &amp;lsquo;rake spec/controllers/users_controller_spec.rb&amp;rsquo; You can also use &amp;lsquo;rspec&amp;rsquo; in place of the rake command.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Tips&lt;/h4&gt;

&lt;p&gt;• Be sure you close all of your &amp;lsquo;do-end&amp;rsquo; blocks. Their lack can cause all sorts of fun confusion.&lt;/p&gt;

&lt;p&gt;• When testing Rails controllers, the :assigns in &lt;/p&gt;
&lt;pre class="highlight text"&gt;expect(:assigns).to eq &amp;lt;value&amp;gt;
&lt;/pre&gt;
&lt;p&gt;is basically equivalent to the variable @assigns in whatever action you&amp;rsquo;re testing&lt;/p&gt;

&lt;p&gt;• Test one thing at a time! Each test should have only one expect or should statement.&lt;/p&gt;

&lt;p&gt;• Move repeated setup statements to the top of a block and make them generally available. Here is an example (notice the let statement at the top, making a user available during each of the tests nested within this block): &lt;/p&gt;
&lt;pre class="highlight text"&gt;describe EventsController do

  let(:user) { FactoryGirl.create(:user) }

  describe &amp;quot;GET #index&amp;quot; do

    it &amp;quot;assigns collection of events&amp;quot; do
      login(user)
      event = FactoryGirl.create(:event)
      current_user.events &amp;lt;&amp;lt; event
      get :index
      expect(assigns(:events)).to eq [event]
    end

    it &amp;quot;renders the index page&amp;quot; do
      login(user)
      get :index
      response.should render_template :index
    end

  end

end
&lt;/pre&gt;
&lt;p&gt;Balance such attempts to make the tests DRY with the need to make them readable and understandable. In other words, moving setup blocks too far away from where they&amp;rsquo;re used can lead to confusion when developers are seeing the code for the first time.&lt;/p&gt;

&lt;p&gt;• Inside the spec directory, create a controllers folder where you can place your controller tests and a models folder where you can test your models. A spec directory might look like the following:&lt;/p&gt;
&lt;pre class="highlight text"&gt;-spec
  - controllers
    users_controller_spec.rb
  - factories
    user.rb
  - fixtures
  - models
    user_spec.rb
  - support
    devise_support.rb
  spec_helper.rb
&lt;/pre&gt;
&lt;h4&gt;Resources:&lt;/h4&gt;

&lt;p&gt;• &lt;a href="https://relishapp.com/rspec"&gt;A great link&lt;/a&gt; for rspec examples. The official spot for RSpec documentation.&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://rspec.info"&gt;A link&lt;/a&gt; with a quick intro to RSpec. Includes info on the RSpec book.&lt;/p&gt;

&lt;p&gt;• Another intro to &lt;a href="http://blog.teamtreehouse.com/an-introduction-to-rspec"&gt;testing with RSpec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://everydayrails.com/2012/03/12/testing-series-intro.html"&gt;Series on testing Rails&lt;/a&gt; using RSpec. A little outdated (2012), but good stuff. &lt;/p&gt;

&lt;p&gt;• &lt;a href="http://everydayrails.com/2012/04/07/testing-series-rspec-controllers.html"&gt;Testing controllers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://robots.thoughtbot.com/how-we-test-rails-applications"&gt;How Thoughtbot uses RSpec&lt;/a&gt; to test Rails.&lt;/p&gt;

&lt;h4&gt;Often associated Gems&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Faker&lt;/li&gt;
&lt;li&gt;factoryGirl&lt;/li&gt;
&lt;li&gt;Capybara&lt;/li&gt;
&lt;li&gt;Guard&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The Ironyard&amp;#58; End Week Five</title>
    <link rel="alternate" href="/blog/2014/05/02/the-ironyard-end-week-five.html"/>
    <id>/blog/2014/05/02/the-ironyard-end-week-five.html</id>
    <published>2014-05-02T04:00:00Z</published>
    <updated>2014-05-02T04:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;First, it’s been a while. Feels like I’m coming up for air after a long dive. But there’s not long to refuel. Tonight is the beginning of &lt;a href="http://atlanta.startupweekend.org/"&gt;Startup Weekend&lt;/a&gt; in Atlanta, a 54-hour hackathon (my first hackathon of any kind, by the way). So I’ll gasp while...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;First, it&amp;rsquo;s been a while. Feels like I&amp;rsquo;m coming up for air after a long dive. But there&amp;rsquo;s not long to refuel. Tonight is the beginning of &lt;a href="http://atlanta.startupweekend.org/"&gt;Startup Weekend&lt;/a&gt; in Atlanta, a 54-hour hackathon (my first hackathon of any kind, by the way). So I&amp;rsquo;ll gasp while I can, I guess.&lt;/p&gt;

&lt;p&gt;
As for The Iron Yard, the last two weeks have been intense. A lot of coding, a lot of Rails, a lot of challenges—in and out of the flow of the course.
&lt;/p&gt;

&lt;p&gt;
But the time and effort is starting to pay off. I can type out a Rails controller off the top of my head—-and that&amp;rsquo;s weird, right? Honestly, I thought we&amp;rsquo;d be scaffolding/generating all the basics, but we&amp;rsquo;ve mostly been typing them out by hand. Our instructor, &lt;a href="shelbyswitzer.com"&gt;Shelby Switzer&lt;/a&gt;, is really pushing us on the fundamentals, pushing us to know how something really works before we take the shortcuts. And Rails has a lot of shortcuts.
&lt;/p&gt;

&lt;p&gt;
Yesterday, Shelby guided us through the process of building authentication (login, logout baby!) into a site or application. The process was substantial&amp;hellip;I was thinking that this was going to take a while to get straight. And then at the end, Shelby introduced the Rails &amp;lsquo;has_secure_password&amp;rsquo; method. Suddenly, we were stripping away the methods we&amp;rsquo;d just built to handle authentication. All of these, Shelby, explained, Rails gives you for free.
&lt;/p&gt;

&lt;p&gt;
So there&amp;rsquo;s the lesson of the moment: Rails gives you a lot for free, BUT it might be a good idea to make some payments up front anyway.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Ironyard&amp;#58; Beginning Week Three</title>
    <link rel="alternate" href="/blog/2014/04/14/the-ironyard-beginning-week-three.html"/>
    <id>/blog/2014/04/14/the-ironyard-beginning-week-three.html</id>
    <published>2014-04-14T04:00:00Z</published>
    <updated>2014-04-14T04:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;We’re at the beginning of week 3 here at the Iron Yard Academy in Atlanta. This week, we’re going to be building sites with Sinatra, talking about REST, gems, bundler, and dipping our toes into the world of databases. The preliminaries appear to be...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We&amp;rsquo;re at the beginning of week 3 here at the Iron Yard Academy in Atlanta. This week, we&amp;rsquo;re going to be building sites with Sinatra, talking about REST, gems, bundler, and dipping our toes into the world of databases. The preliminaries appear to be near their end; now we&amp;rsquo;re building web apps. &lt;/p&gt;

&lt;p&gt;
  But before diving headlong into this week, I wanted to linger a bit on the end of last week. The last three days and weekend were all about HTML and CSS. We basically got a pdf of a site—and had to mimic it as closely as possible. For me, it was a labor intensive assignment. Apparently, there are a lot of details of web design I don&amp;rsquo;t even notice. (Hello, shadows!) I&amp;rsquo;ve been dabbling in HTML and CSS for a while, but a little piece of positioning finally clicked into place over the weekend.
&lt;/p&gt;

&lt;p&gt;
  Basically, I discovered how to create rows of content using nested &lt;a href="http://en.wikipedia.org/wiki/Span_and_div"&gt;divs&lt;/a&gt;. Yeah, it ain&amp;rsquo;t rocket science, but I was happy to understand it—even if all of the frameworks out there basically make this epiphany a little redundant. 
&lt;/p&gt;

&lt;p&gt;
  So here&amp;rsquo;s how I understand it. 
&lt;/p&gt;

&lt;p&gt;
  &lt;ol&gt;
    &lt;li&gt;
      Create a parent div pair. We&amp;rsquo;ll give them a class of grandparent. 
      &lt;p&gt;
      &lt;code&gt;
        &lt;div class="grandparent"&gt;
          
        &lt;/div&gt;
      &lt;/code&gt;
      &lt;/p&gt;

      In the css, we&amp;rsquo;ll give grandparent a width of 100%.
      &lt;p&gt;
        &lt;code&gt;
          .grandparent {
            width: 100%;
          }
        &lt;/code&gt;
      &lt;/p&gt;
    &lt;/li&gt;
      Nested inside of grandparent, we&amp;rsquo;ll put another div pair. This one, we&amp;rsquo;ll give a class of parent.
      &lt;p&gt;
        &lt;code&gt;
          &lt;div class="grandparent"&gt;
            &lt;div class="parent"&gt;
              
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/code&gt;
      &lt;/P&gt;

      In the css, we&amp;rsquo;ll give parent the width we have in mind for our layout, whether that&amp;rsquo;s 768, 940, or whatever. You&amp;rsquo;ll also need to set margin to auto if you want your eventual content to be centered on the page. I suspect that it might be a good idea to set height here too. This chould help short circuit positioning confusion later, as you add more and more to your design.
      
      &lt;P&gt;
        &lt;code&gt;
          .parent {
            width: 940px;
            margin: auto
          }
        &lt;/code&gt;
      &lt;/P&gt;

    &lt;li&gt;
      Finally, we can nest our content inside of our two existing divs.
      &lt;P&gt;
        &lt;pre  style="font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;"&gt;&lt;code style="color:#000000;word-wrap:normal;"&gt; &amp;lt;div class="grandparent"&amp;gt;  
       &amp;lt;div class="parent"&amp;gt;  
        &amp;lt;div class="child1"&amp;gt;  
         content  
        &amp;lt;/div&amp;gt;  
         &amp;lt;div class="child2"&amp;gt;  
         content  
        &amp;lt;/div&amp;gt;  
        &amp;lt;div class="child3"&amp;gt;  
         content  
        &amp;lt;/div&amp;gt;  
       &amp;lt;/div&amp;gt;  
      &amp;lt;/div&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
      &lt;/P&gt;

      In the css, we can give these children divs widths that add up to our parent width (while taking margin, border, etc. into account). You&amp;rsquo;ll also need to float the divs left or right to get them into the row formation. So, something like:
      
      &lt;P&gt;
       &lt;pre  style="font-family:arial;font-size:12px;border:1px dashed #CCCCCC;width:99%;height:auto;overflow:auto;background:#f0f0f0;;background-image:URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif);padding:0px;color:#000000;text-align:left;line-height:20px;"&gt;&lt;code style="color:#000000;word-wrap:normal;"&gt; .child1 {  
       width: 300px;  
       margin-right: 10px;  
       float:left;  
      }  
      .child2 {  
       width: 300px;  
       margin-left: 10px;  
       margin-right: 10px;  
       float:left;  
      }  
      .child3 {  
       width: 300px;  
       margin-left: 10px;  
       float:left;  
      }  
&lt;/code&gt;&lt;/pre&gt;
      &lt;/P&gt;
      
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;Of course, getting this to work responsively is a lot more complex. And there are probably some nuances of how all of this works together that I&amp;rsquo;m missing. But it&amp;rsquo;s a start. 
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Ironyard&amp;#58; Day Six</title>
    <link rel="alternate" href="/blog/2014/04/08/the-ironyard-day-six.html"/>
    <id>/blog/2014/04/08/the-ironyard-day-six.html</id>
    <published>2014-04-08T04:00:00Z</published>
    <updated>2014-04-08T04:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;It’s the morning of day 7 here at the &lt;a href="http://theironyard.com/"&gt;Iron Yard Academy&lt;/a&gt; in Atlanta. The sun is coming up. There’s a chill in the air. I’m listening to &lt;a href="http://www.npr.org/2014/03/23/291167043/first-listen-mac-demarco-salad-days"&gt;Mac Demarco’s album ‘Salad Days"&lt;/a&gt; on my headphones.&lt;/p&gt;

&lt;p&gt;
I’m glad to be here, getting ready for another day. It’s funny...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;It&amp;rsquo;s the morning of day 7 here at the &lt;a href="http://theironyard.com/"&gt;Iron Yard Academy&lt;/a&gt; in Atlanta. The sun is coming up. There&amp;rsquo;s a chill in the air. I&amp;rsquo;m listening to &lt;a href="http://www.npr.org/2014/03/23/291167043/first-listen-mac-demarco-salad-days"&gt;Mac Demarco&amp;rsquo;s album &amp;lsquo;Salad Days&amp;quot;&lt;/a&gt; on my headphones.&lt;/p&gt;

&lt;p&gt;
I&amp;rsquo;m glad to be here, getting ready for another day. It&amp;rsquo;s funny, for the last few years, I got in the habit of staying up late and getting up late. I&amp;rsquo;d drag myself out of bed and into work. When I think about those years now, I realize how little excitement I felt about my work. It&amp;rsquo;s probably no accident that I chose the word &amp;ldquo;drag&amp;rdquo; to describe what I did on those mornings.
&lt;/p&gt;

&lt;p&gt;
  So yeah, The Iron Yard isn&amp;rsquo;t easy. The days are long and sometimes overwhelming. But they&amp;rsquo;re full. They&amp;rsquo;re challenging. And for me, that old familiar &amp;ldquo;drag&amp;rdquo; is absent. Of course, maybe there&amp;rsquo;s a little Don Draper to the situation—you know, loving the beginning of things. And I can&amp;rsquo;t deny that I do love the beginning of things. But I&amp;rsquo;ve been building from the ground up with coding for almost two years—and I&amp;rsquo;m still fired up about it. At this point, I suspect it&amp;rsquo;s not the romance that&amp;rsquo;s fueling the fire (though that might be part of it too); I think it&amp;rsquo;s the solving of problems. I just flat like to make things work.
&lt;/p&gt;

&lt;p&gt;
  Anyway, enough of my—what do you even call this—Philosophizing? Navel-gazing? Yeah, probably the latter. But let&amp;rsquo;s get to specifics. Over the last three or four days at The Iron Yard Academy, we&amp;rsquo;ve continued our whirlwind tour of Ruby. We&amp;rsquo;ve looked at methods, classes, class methods, and inheritance. Today, we start looking at &lt;a href="http://rspec.info/"&gt;RSpec&lt;/a&gt;, a testing tool for Ruby code. So I might feel different about the &amp;ldquo;drag&amp;rdquo; thing by the end of the day:)
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Ironyard&amp;#58; Day Three</title>
    <link rel="alternate" href="/blog/2014/04/03/the-ironyard-day-three.html"/>
    <id>/blog/2014/04/03/the-ironyard-day-three.html</id>
    <published>2014-04-03T04:00:00Z</published>
    <updated>2014-04-03T04:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Okay, this might shortchange the day a little, but…Ruby methods and refactoring. That was day three. There was a lot of programming head.&lt;/p&gt;

&lt;p&gt;One thing I relearned: It’s good to know what kind of object you’re dealing with. Is it a string, a symbol, an...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Okay, this might shortchange the day a little, but&amp;hellip;Ruby methods and refactoring. That was day three. There was a lot of programming head.&lt;/p&gt;

&lt;p&gt;One thing I relearned: It&amp;rsquo;s good to know what kind of object you&amp;rsquo;re dealing with. Is it a string, a symbol, an integer, an array, a hash? It matters. Really matters.&lt;/p&gt;

&lt;p&gt;More later.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Ironyard&amp;#58; Day Two</title>
    <link rel="alternate" href="/blog/2014/04/01/the-ironyard-day-two.html"/>
    <id>/blog/2014/04/01/the-ironyard-day-two.html</id>
    <published>2014-04-01T04:00:00Z</published>
    <updated>2014-04-01T04:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I’m starting to figure out that I’m not going to have a lot of time to write during my twelve weeks at The Iron Yard, but I’m going to try and write at least a few times a week. Day two looked like this: &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;We started the morning going over the previous...&lt;/li&gt;&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;rsquo;m starting to figure out that I&amp;rsquo;m not going to have a lot of time to write during my twelve weeks at The Iron Yard, but I&amp;rsquo;m going to try and write at least a few times a week. Day two looked like this: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We started the morning going over the previous day&amp;rsquo;s homework. Someone would bring their computer to the front and our instructor would hook it up to the huge TV monitor. Another student would then talk through the code, explaining what they thought was going on. We went through three or four programs in an hour and a half. The lesson: Not only do we need to know how to code; we need to understand how to talk about it.&lt;/li&gt;
  &lt;li&gt;After the early morning session, we spent some time going over hashes in Ruby. Things got nested quickly:)&lt;/li&gt;
  &lt;li&gt;In the afternoon lab, we started working on our next assignment: a personality quiz. The guidelines looked like this:&lt;/li&gt;
  &lt;br /&gt;
      &lt;ul&gt;
        &lt;li&gt;at lease 10 questions&lt;/li&gt;
        &lt;li&gt;use hashes to store data&lt;/li&gt;
        &lt;li&gt;scoring must involve at least one ternary operator&lt;/li&gt;
        &lt;li&gt;report results of personality quiz to user&lt;/li&gt;
        &lt;li&gt;Bonus: multiple users complete and store data (within life of program)&lt;/li&gt;
        &lt;li&gt;show user results (paragraph, table, percentages)&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;If you&amp;rsquo;re interested, you can see my personality quiz &lt;a href="https://gist.github.com/judesamp/9917942"&gt;here&lt;/a&gt;.&lt;/p&gt;
  
&lt;/ul&gt;

&lt;p&gt;
  More later.
&lt;/p&gt;
</content>
  </entry>
</feed>
